package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"github.com/araddon/dateparse"
	"os"
	"strings"
	"time"
)

func ReadFile(fileName string) []string {

	file, err := os.Open(fileName)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println("Successfully Opened file")
	defer file.Close()

	var lines []string
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		var newLine string = scanner.Text()
		ans := strings.Split(newLine, "Search :")
		println(ans)
		os.Exit(-1)
	}

	return lines
}

func main() {

	//////////////////////////////
	// Loading json from string //
	//////////////////////////////
	// Data to load
	stringData := `{"MetaData": {"deviceId": "80d2decd-07a0-4208-8488-f63091bb7545", "vehicleId": "de6da550-20bf-4a4f-b8c3-d8f3db12e4d7", "physicalId": "605cacff-8b55-42ee-a719-56b0da875c64", "nodeId": "57658ffd-7df5-4da4-8fa6-116d20a33b12", "orgId": "c6751c43-62eb-40ff-87b8-452e6468f3a8", "timeStamp": "2021-09-01T08:59:30Z", "id": "5212bc14-ce42-44bc-8322-fc95dd25358d", "lat": "54.389203", "lng": "-7.131842"}, "Instances": {"features": {"deviceId": "80d2decd-07a0-4208-8488-f63091bb7545", "event_time": "2021-09-01T08:59:30Z", "start_time": "2021-09-01 08:59:20.032000", "end_time": "2021-09-01 08:59:39.752000", "trigger": [0.55, 0.45, 2.5], "deviceType": "1", "featurevector": [["2021-09-01 08:59:20.032000+00:00", "0.27", "-0.02", "-0.07"], ["2021-09-01 08:59:20.545000+00:00", "0.3", "-0.01", "-0.08"], ["2021-09-01 08:59:20.571000+00:00", "0.17", "0.0", "-0.25"], ["2021-09-01 08:59:20.670000+00:00", "0.31", "-0.1", "0.09"], ["2021-09-01 08:59:21.094000+00:00", "0.26", "-0.08", "-0.04"], ["2021-09-01 08:59:21.131000+00:00", "0.28", "-0.04", "-0.09"], ["2021-09-01 08:59:21.311000+00:00", "0.22", "0.0", "-0.13"], ["2021-09-01 08:59:21.785000+00:00", "0.13", "-0.05", "-0.16"], ["2021-09-01 08:59:21.812000+00:00", "0.21", "-0.05", "0.05"], ["2021-09-01 08:59:21.953000+00:00", "0.26", "-0.02", "-0.02"], ["2021-09-01 08:59:22.152000+00:00", "0.21", "-0.03", "-0.17"], ["2021-09-01 08:59:22.636000+00:00", "0.24", "-0.05", "-0.01"], ["2021-09-01 08:59:22.662000+00:00", "0.19", "-0.03", "-0.13"], ["2021-09-01 08:59:22.792000+00:00", "0.21", "-0.06", "-0.02"], ["2021-09-01 08:59:23.246000+00:00", "0.27", "-0.03", "0.06"], ["2021-09-01 08:59:23.271000+00:00", "0.2", "0.04", "-0.06"], ["2021-09-01 08:59:23.430000+00:00", "0.17", "-0.02", "-0.07"], ["2021-09-01 08:59:23.840000+00:00", "0.2", "-0.0", "-0.13"], ["2021-09-01 08:59:23.861000+00:00", "0.2", "-0.03", "-0.15"], ["2021-09-01 08:59:24.061000+00:00", "0.09", "0.0", "-0.11"], ["2021-09-01 08:59:24.272000+00:00", "0.23", "-0.02", "-0.04"], ["2021-09-01 08:59:24.491000+00:00", "0.21", "-0.05", "-0.13"], ["2021-09-01 08:59:24.961000+00:00", "0.21", "-0.02", "-0.05"], ["2021-09-01 08:59:24.961000+00:00", "0.28", "-0.03", "0.07"], ["2021-09-01 08:59:25.143000+00:00", "0.26", "-0.0", "-0.06"], ["2021-09-01 08:59:25.556000+00:00", "0.36", "-0.06", "0.05"], ["2021-09-01 08:59:25.582000+00:00", "0.01", "-0.01", "-0.49"], ["2021-09-01 08:59:25.762000+00:00", "0.27", "-0.05", "0.18"], ["2021-09-01 08:59:25.980000+00:00", "0.26", "-0.05", "-0.05"], ["2021-09-01 08:59:26.190000+00:00", "0.21", "-0.06", "-0.12"], ["2021-09-01 08:59:26.388000+00:00", "0.2", "-0.05", "-0.06"], ["2021-09-01 08:59:26.624000+00:00", "0.28", "-0.07", "0.01"], ["2021-09-01 08:59:27.125000+00:00", "0.26", "-0.06", "-0.12"], ["2021-09-01 08:59:27.150000+00:00", "0.19", "-0.05", "-0.18"], ["2021-09-01 08:59:27.251000+00:00", "0.29", "-0.06", "-0.04"], ["2021-09-01 08:59:27.725000+00:00", "0.28", "-0.0", "-0.04"], ["2021-09-01 08:59:27.751000+00:00", "0.27", "-0.06", "-0.05"], ["2021-09-01 08:59:27.893000+00:00", "0.25", "-0.0", "-0.08"], ["2021-09-01 08:59:28.332000+00:00", "0.26", "-0.06", "-0.08"], ["2021-09-01 08:59:28.332000+00:00", "0.3", "-0.08", "-0.05"], ["2021-09-01 08:59:28.543000+00:00", "0.29", "-0.01", "-0.07"], ["2021-09-01 08:59:28.956000+00:00", "0.34", "0.01", "-0.11"], ["2021-09-01 08:59:28.971000+00:00", "0.45", "-0.03", "-0.08"], ["2021-09-01 08:59:29.161000+00:00", "0.34", "-0.03", "-0.17"], ["2021-09-01 08:59:29.647000+00:00", "0.46", "-0.06", "-0.11"], ["2021-09-01 08:59:29.681000+00:00", "0.58", "-0.1", "-0.15"], ["2021-09-01 08:59:29.791000+00:00", "0.57", "-0.06", "-0.18"], ["2021-09-01 08:59:30+00:00", "0.62", "-0.05", "-0.28"], ["2021-09-01 08:59:30.452000+00:00", "0.48", "-0.13", "-0.24"], ["2021-09-01 08:59:30.453000+00:00", "0.5", "-0.09", "-0.05"], ["2021-09-01 08:59:30.961000+00:00", "0.44", "-0.04", "-0.06"], ["2021-09-01 08:59:30.961000+00:00", "0.44", "-0.08", "-0.04"], ["2021-09-01 08:59:31.052000+00:00", "0.27", "-0.2", "-0.18"], ["2021-09-01 08:59:31.495000+00:00", "0.35", "-0.24", "-0.15"], ["2021-09-01 08:59:31.520000+00:00", "0.29", "-0.19", "-0.08"], ["2021-09-01 08:59:31.967000+00:00", "0.29", "-0.2", "-0.12"], ["2021-09-01 08:59:31.991000+00:00", "0.29", "-0.26", "-0.1"], ["2021-09-01 08:59:32.151000+00:00", "0.26", "-0.24", "-0.08"], ["2021-09-01 08:59:32.330000+00:00", "0.27", "-0.24", "-0.08"], ["2021-09-01 08:59:32.785000+00:00", "0.26", "-0.18", "-0.06"], ["2021-09-01 08:59:32.810000+00:00", "0.22", "-0.23", "-0.03"], ["2021-09-01 08:59:32.970000+00:00", "0.23", "-0.21", "-0.07"], ["2021-09-01 08:59:33.437000+00:00", "0.19", "-0.14", "-0.18"], ["2021-09-01 08:59:33.462000+00:00", "0.14", "-0.17", "-0.02"], ["2021-09-01 08:59:33.621000+00:00", "0.27", "-0.23", "0.02"], ["2021-09-01 08:59:34.056000+00:00", "0.22", "-0.12", "-0.04"], ["2021-09-01 08:59:34.080000+00:00", "0.17", "-0.18", "-0.01"], ["2021-09-01 08:59:34.241000+00:00", "0.17", "-0.11", "0.06"], ["2021-09-01 08:59:34.461000+00:00", "0.22", "-0.13", "-0.07"], ["2021-09-01 08:59:34.970000+00:00", "0.17", "-0.16", "-0.14"], ["2021-09-01 08:59:34.970000+00:00", "0.19", "-0.13", "-0.1"], ["2021-09-01 08:59:35.090000+00:00", "0.16", "-0.06", "-0.07"], ["2021-09-01 08:59:35.561000+00:00", "0.23", "-0.12", "-0.01"], ["2021-09-01 08:59:35.572000+00:00", "0.27", "-0.11", "-0.06"], ["2021-09-01 08:59:35.730000+00:00", "0.22", "-0.15", "-0.06"], ["2021-09-01 08:59:36.075000+00:00", "0.2", "-0.09", "-0.07"], ["2021-09-01 08:59:36.160000+00:00", "0.14", "-0.13", "-0.0"], ["2021-09-01 08:59:36.362000+00:00", "0.14", "-0.08", "-0.05"], ["2021-09-01 08:59:36.831000+00:00", "0.12", "-0.05", "-0.05"], ["2021-09-01 08:59:36.831000+00:00", "0.14", "-0.11", "0.0"], ["2021-09-01 08:59:37.002000+00:00", "0.16", "-0.09", "-0.04"], ["2021-09-01 08:59:37.505000+00:00", "0.16", "-0.12", "-0.2"], ["2021-09-01 08:59:37.530000+00:00", "0.18", "-0.08", "-0.11"], ["2021-09-01 08:59:37.631000+00:00", "0.3", "-0.05", "-0.03"], ["2021-09-01 08:59:38.064000+00:00", "0.27", "-0.05", "-0.04"], ["2021-09-01 08:59:38.101000+00:00", "0.21", "-0.03", "-0.12"], ["2021-09-01 08:59:38.284000+00:00", "0.14", "-0.0", "-0.16"], ["2021-09-01 08:59:38.528000+00:00", "0.21", "-0.02", "-0.12"], ["2021-09-01 08:59:38.932000+00:00", "0.18", "-0.02", "0.04"], ["2021-09-01 08:59:38.933000+00:00", "0.19", "0.0", "0.0"], ["2021-09-01 08:59:39.142000+00:00", "0.12", "-0.09", "-0.09"], ["2021-09-01 08:59:39.498000+00:00", "0.14", "-0.06", "-0.03"], ["2021-09-01 08:59:39.540000+00:00", "0.17", "0.03", "0.1"], ["2021-09-01 08:59:39.752000+00:00", "0.18", "-0.09", "0.02"]]}, "prediction": {"predicted_label": "harshBreaking", "score": [24.25555889726378, 24.61154110322492, 24.66048405206474], "uuids": ["22a0e699-a834-43ba-b50a-c8f663db0be7", "a195a05a-198e-4e1b-bd73-c8c66c1b0ee6", "1587b8bf-3537-4bcf-b5b3-7d3b36228d56"], "threshold": 25.0}}, "OutputSQSQueueName": "pvcam-prod-BlackboxOutputQueue", "ModelInfo": {"ClassifierGroupId": "imu", "ClassifierIds": ["3a33d4b6-7bd5-4e6f-8d31-7b90ea3c538f"], "ClassifierId": "3a33d4b6-7bd5-4e6f-8d31-7b90ea3c538f", "arn": "arn:aws:states:us-east-1:444235434904:stateMachine:pvcam-prod-IMUModelStateMachine"}, "OutputSQSQueueUrl": "https://queue.amazonaws.com/444235434904/pvcam-prod-BlackboxOutputQueue", "RequestId": "d9f41173-48c8-4f56-888a-d232aed11bbb"}`
	// Define data as struct
	type IMUEvent struct {
		MetaData struct {
			DeviceID   string    `json:"deviceId"`
			VehicleID  string    `json:"vehicleId"`
			PhysicalID string    `json:"physicalId"`
			NodeID     string    `json:"nodeId"`
			OrgID      string    `json:"orgId"`
			TimeStamp  time.Time `json:"timeStamp"`
			ID         string    `json:"id"`
			Lat        string    `json:"lat"`
			Lng        string    `json:"lng"`
		} `json:"MetaData"`
		Instances struct {
			Features struct {
				DeviceID      string     `json:"deviceId"`
				EventTime     time.Time  `json:"event_time"`
				StartTime     string     `json:"start_time"`
				EndTime       string     `json:"end_time"`
				Trigger       []float64  `json:"trigger"`
				DeviceType    string     `json:"deviceType"`
				Featurevector [][]string `json:"featurevector"`
			} `json:"features"`
			Prediction struct {
				PredictedLabel string    `json:"predicted_label"`
				Score          []float64 `json:"score"`
				Uuids          []string  `json:"uuids"`
				Threshold      float64   `json:"threshold"`
			} `json:"prediction"`
		} `json:"Instances"`
		OutputSQSQueueName string `json:"OutputSQSQueueName"`
		ModelInfo          struct {
			ClassifierGroupID string   `json:"ClassifierGroupId"`
			ClassifierIds     []string `json:"ClassifierIds"`
			ClassifierID      string   `json:"ClassifierId"`
			Arn               string   `json:"arn"`
		} `json:"ModelInfo"`
		OutputSQSQueueURL string `json:"OutputSQSQueueUrl"`
		RequestID         string `json:"RequestId"`
	}

	// load the string into JSON
	var myEvent IMUEvent
	err := json.Unmarshal([]byte(stringData), &myEvent)
	if err != nil {
		return
	}

	////////////////////////////////
	// Parsing datetime in Golang //
	////////////////////////////////
	// use the dateparse library in golang - equivalent to ciso8601 library
	ans, _ := dateparse.ParseAny(myEvent.Instances.Features.StartTime)
	println(ans.String())

	ReadFile("./data.csv")

}
